// Creo los arrays vac√≠os que necesito
let libros = []
let usuarios = []
let locaciones = []
let prestamos = []
let prestamoNro = 0

function crearLocacion(locacion) {
    locaciones.push(locacion)
    console.log(locaciones)
}

function validacionDeEleccionConArray(valor, array) {
    valor = valor.trim()
    return valor !== null && valor !== "" && !isNaN(valor) && valor >= 0 && valor < array.length
}

function validacionDeMenu(valor, items) {
    valor = valor.trim()
    return valor !== null && valor !== "" && !isNaN(valor) && valor >= 0 && valor <= items
}

function validacionDeEleccionSinArray(valor, piso = 0, techo = Infinity) {
    valor = valor.trim()
    valor = valor.replace(/\D/g, "") // uso regex para normalizar el dato, quitando todo lo que no sea n√∫mero
    let esValido = valor !== null && valor !== "" && !isNaN(valor) && valor >= piso && valor <= techo
    return { Valor: valor, esValido: esValido }
}


function validacionDeISBN(valor, piso = 10, techo = 13) {
    valor = valor.trim()
    valor = valor.replace(/\D/g, "") // uso regex para normalizar el dato, quitando todo lo que no sea n√∫mero
    let esValido = valor !== null && valor !== "" && !isNaN(valor) && valor.length >= piso && valor.length <= techo
    return { Valor: valor, esValido: esValido }
}

function buscarUsuario() {

    for (let intentos = 3; intentos > 0; intentos--) {
        buscarPorDNI = Number(prompt("üë§Ingres√° el n√∫mero de DNI del usuario"))
        console.log(buscarPorDNI)

        let usuario = usuarios.find(u => u.DNI === buscarPorDNI)

        if (usuario) {
            alert(`‚û°Ô∏è Est√°s a punto de prestarle un libro a ${usuario.Nombre} ${usuario.Apellido} - DNI ${usuario.DNI}`)
            console.log(usuario)
            return usuario
        } else {
            alert("ü§∑‚Äç‚ôÇÔ∏è DNI no encontrado, intenta nuevamente.")
        }
    }

    alert("‚ùå Has agotado los intentos. Volver√°s al men√∫ principal.")
    return null
}

// Hago el men√∫
const menu = `Bienvenidx. ¬øQu√© dese√°s hacer hoy? 
    \n 1- Nueva locaci√≥n
    \n 2- Alta de nuevo usuario
    \n 3- Ingreso de nuevo libro
    \n 4- Pr√©stamo
    \n 5- Devoluci√≥n
    \n 6- Ver libros prestados
    \n 7- Ver pr√©stamos fuera de fecha
    \n 0- Salir`


let bandera = true

while (bandera) {

    let opciones = Number(prompt(menu))

    switch (opciones) {

        case null:

        case 0:
            bandera = false
            break

        case 1:
            let mensaje = prompt("¬øC√≥mo se llaman la nueva locaci√≥n?")

            crearLocacion(mensaje)

            alert(`Se ha incorporado "${mensaje}" como una nueva locaci√≥n. A partir de ahora, podr√°s guardar libros ah√≠.`)

            break

        case 2: // Crear usuario
            let apellido = prompt("Ingres√° el apellido del nuevo usuario").toUpperCase()

            let nombre = prompt("Ingres√° su nombre de pila").toUpperCase()

            let mensajeDNI = "Ingres√° su n√∫mero de DNI"
            let seleccionDNI
            let esDNIValido
            let dni

            do {

                seleccionDNI = prompt(mensajeDNI)

                let resultadoDNI = validacionDeEleccionSinArray(seleccionDNI, 10_000_000, 99_999_999)

                esDNIValido = resultadoDNI.esValido

                dni = Number(resultadoDNI.Valor)

                if (!esDNIValido) {
                    alert("‚ùå Lo sentimos. No ingresaste un valor v√°lido.")
                }

            } while (!esDNIValido)

            let agregarUsuario = (apellido, nombre, dni) => { usuarios.push({ Apellido: apellido, Nombre: nombre, DNI: dni }) }

            agregarUsuario(apellido, nombre, dni)

            alert(`Se ha agregado a ${nombre} ${apellido} al registro de usuarios. Usaremos su n√∫mero de DNI como n√∫mero de socio: ${dni}`)

            console.log(usuarios)

            break

        case 3: // Crear libro

            if (locaciones.length == 0) {
                alert("‚ö†Ô∏è No hay locaciones displonibles en las que almacenar libros. Vuelva al men√∫ principal e ingrese una.")
                break
            }

            let mensajeISBN = "Ingres√° el c√≥digo ISBN del libro (es un n√∫mero entre 10 y 13 digitos)"
            let seleccionISBN
            let esISBNValido
            let isbn

            do {

                seleccionISBN = prompt(mensajeISBN)
                2
                let resultadoISBN = validacionDeISBN(seleccionISBN)

                esISBNValido = resultadoISBN.esValido

                isbn = Number(resultadoISBN.Valor)


                if (!esISBNValido) {
                    alert("‚ùå Lo sentimos. No ingresaste un valor v√°lido.")
                }

            } while (!esISBNValido)

            let ejemplar = libros.find(l => l.ISBN === isbn)
            console.log(ejemplar)

            if (ejemplar) {
                let libroDuplicado = Number(prompt(`Ya tenemos un libro con ese ISBN. Corrobore los datos ingresados: "${ejemplar.T√≠tulo}" de ${ejemplar.Autor} (${ejemplar.ISBN}). Cantidad existente: ${ejemplar.Ejemplares} \n\n üëâ¬øQu√© desea hacer? \n\n 1- Agregar un nuevo ejemplar de este libro al cat√°logo \n 2- Cancelar`))

                if (libroDuplicado == 1) {
                    ejemplar.Ejemplares++
                    alert(`üíæCAMBIOS GUARDADOS \n Acab√°s de sumar un ejemplar al siguiente libro: \n-ISBN: ${ejemplar.ISBN}\n-T√≠tulo: ${ejemplar.T√≠tulo}\n-Autor: ${ejemplar.Autor}\n-N√∫mero actualizado de ejemplares: ${ejemplar.Ejemplares}`)

                } else if (libroDuplicado == 2) {
                    alert("‚ùå OPERACI√ìN CANCELADA")
                }

                break
            }

            let titulo = prompt("Ingres√° el t√≠tulo de la obra").toUpperCase()
            let autor = prompt("Indic√° el nombre completo del autor").toUpperCase()
            let cantidad = Number(prompt("Cantidad de nuevos ejemplares a ingresar"))
            if (!cantidad || isNaN(cantidad) || cantidad <= 0) {
                cantidad = 1 // Asigna por defecto el valor 1 si el prompt queda vac√≠o o es un valor no num√©rico
            }


            let mensajeLocaciones = `Ingrese la locaci√≥n en la que se encuentra f√≠sicamente el libro utilizando el n√∫mero de la opci√≥n correspondiente:\n`
            for (let i = 0; i < locaciones.length; i++) {
                mensajeLocaciones += `\n ${locaciones.indexOf(locaciones[i])} - ${locaciones[i]}`
            }

            const esLocacionValida = function (valor) {
                valor = valor.trim() // tuve que agregar esto para que no convierta el espacio en blanco en un "0" (ya que 0 es el valor de la primera opci√≥n que se muestra en pantalla)
                return valor !== null && valor !== "" && !isNaN(valor) && valor >= 0 && valor < locaciones.length // retorna un booleano
            }

            do {
                seleccionDeLocacion = prompt(mensajeLocaciones)

                if (!esLocacionValida(seleccionDeLocacion)) {
                    alert("‚ùå Lo sentimos. No seleccionaste una locaci√≥n v√°lida. Intenta nuevamente.")
                }

            } while (!esLocacionValida(seleccionDeLocacion)) // muestra error y vuelve siempre al prompt de selecci√≥n de locaci√≥n hasta tanto el valor ingresado satisfaga la validaci√≥n de la funcion esLocacionValida

            seleccionDeLocacion = Number(seleccionDeLocacion) // me aseguro de que el valor ingresado no sea le√≠do como string
            locacion = locaciones[seleccionDeLocacion] // uso el valor del n√∫mero ingresado como √≠ndice para recuperar la locaci√≥n del array locacionbes y seteo la variable correspondiente con el valor que corresponde


            let agregarLibro = () => { libros.push({ Autor: autor, T√≠tulo: titulo, ISBN: isbn, Ejemplares: cantidad, Locaci√≥n: locacion }) }

            agregarLibro()

            alert(`Se ha agregado ${cantidad} ejemplar de ${titulo} de ${autor} a tu biblioteca en ${locacion}. Podr√°s prestarlo cuando quieras.`)
            console.log(libros)
            break

        case 4: // Prestar

            if (libros.length === 0 || usuarios.length === 0){
                alert("üßô‚Äç‚ôÇÔ∏è No podemos hacer magia. ü™Ñ Para poder prestar un libro necesitar√°s, primero, ingresar libros en la biblioteca y registrar al menos un usuario.")
                break
            }
            
            let usuarioEncontrado = buscarUsuario()
            if (!usuarioEncontrado) {
                break
            }
            //Ac√° no entiendo el scope. Si las variables est√°n encapsuladas dentro de case no tendria que haber problema con que tengan el mismo nombre que en otro lugar. Sin embargo, no se ejecuta nada si lo hago as√≠
            let mensajeISBN2 = "Ingres√° el c√≥digo ISBN del libro (es un n√∫mero entre 10 y 13 digitos)"
            let seleccionISBN2
            let esISBNValido2
            let isbn2

            do {

                seleccionISBN2 = prompt(mensajeISBN2)

                let resultadoISBN2 = validacionDeISBN(seleccionISBN2)

                esISBNValido2 = resultadoISBN2.esValido

                isbn2 = Number(resultadoISBN2.Valor)


                if (!esISBNValido2) {
                    alert("‚ùå Lo sentimos. No ingresaste un valor v√°lido.")
                }

            } while (!esISBNValido2)


            let libro = libros.find(libro => libro.ISBN === isbn2)

            console.log(libro)

            if (!libro) {
                alert("‚ùå No tenemos un libro con ese ISBN. Corrobore los datos ingresados.")
                break
            } else if (libro.ejemplar = 0) {
                alert("‚ùå Lo sentimos. Este libro no se encuentra actualmente disponible.")
                break
            }

            alert(`üìï Libro con ISBN ${libro.ISBN} encontrado:\n-T√≠tulo: ${libro.T√≠tulo}\n-Autor: ${libro.Autor}\n-Ejemplares: ${libro.Ejemplares}`)

            prestamoNro++

            let fechaPrestamo = new Date()
            let fechaVencimiento = new Date()

            //Modificar para que diga +7 luego del testeo
            fechaVencimiento.setDate(fechaVencimiento.getDate() - 7)

            // Investigar c√≥mo hacer toLocaleDateString("es-AR")

            function prestarLibro() {
                prestamos.push({
                    C√≥digo: prestamoNro,
                    Usuario: usuarioEncontrado.DNI,
                    Nombre: `${usuarioEncontrado.Nombre} ${usuarioEncontrado.Apellido}`,
                    T√≠tulo: libro.T√≠tulo,
                    Autor: libro.Autor,
                    Fecha: fechaPrestamo,
                    Vencimiento: fechaVencimiento
                })
                console.log(libro.Ejemplares)
                libro.Ejemplares -= 1
                console.log(libro.Ejemplares)
            }

            if (libro.Ejemplares >= 1) {
                prestarLibro()

                alert(`‚úÖ Pr√©stamo confirmado: 
                    \nüë§DATOS DE USUARIO: ${usuarioEncontrado.Nombre} ${usuarioEncontrado.Apellido} (DNI: ${usuarioEncontrado.DNI})
                    \nüìï DATOS DEL LIBRO: ${libro.T√≠tulo} ${libro.Autor} (ISBN: ${libro.ISBN})
                    \nüìÖFECHA: ${fechaPrestamo} 
                    \nüî¥ VENCIMIENTO: ${fechaVencimiento}`)

            } else {
                alert("No quedan ejemplares en la biblioteca. El libro que usted busca se encuentra prestado")
                break
            }

            console.log(prestamos)

            break

        case 5: // Devolver

            if (prestamos.length === 0) {
                alert("‚ö†Ô∏è Para devolver un libro, primero deb√©s prestarlo. Es cuesti√≥n de sentido com√∫n... üßâ")
                break
            } 
            
            let usuarioDevolver = Number(prompt("ü™™ Ingres√° el n√∫mero del socio que desea devolver o renovar su pr√©stamo"))

            let devolver = prestamos.filter(libroParaDevolver => libroParaDevolver.Usuario === usuarioDevolver)

            let mensajeDevolver = `Los libros disponibles para devolver son:`

            for (let i = 0; i < devolver.length; i++) {
                mensajeDevolver += `\n______________________________________________________\n üîë C√≥digo: ${devolver[i].C√≥digo} \nüìå Usuario: ${devolver[i].Nombre} (DNI ${devolver[i].Usuario} \nüìï Titulo: "${devolver[i].T√≠tulo}" de ${devolver[i].Autor} \nüìÖ Vencimiento: ${devolver[i].Vencimiento}`
            }

            mensajeDevolver += `\n______________________________________________________\n \nüëâüëâ Ingres√° el c√≥digo del libro que quer√©s devolver.`

            let itemDevolver = prompt(mensajeDevolver)

            let indiceDevolver = prestamos.findIndex(item => item.C√≥digo === Number(itemDevolver))

            console.log(indiceDevolver)

            if (indiceDevolver !== -1) {
                prestamos.splice(indiceDevolver, 1)

                alert("¬°Libro devuelto! ‚úÖ")
            }

            console.log(prestamos)

            // sumar de nuevo el libro al inventario 
            break

        case 6: // Ver pr√©stamos
            if (prestamos.length === 0) {
                alert("Por el momento, nada que mostrar aqu√≠ üëÄ. No hay libros prestados a domicilio. Vuelva m√°s tarde.")
                break
            } else {
                
                let mensajePrestamos = `üìö Los libros prestados son:\n`

                for (let i = 0; i < prestamos.length; i++) {
                    let prestamo = prestamos[i]

                    mensajePrestamos += `\nüëâ ${prestamo.T√≠tulo} - ${prestamo.Autor} | Usuario: ${prestamo.Nombre} (DNI: ${prestamo.Usuario}) | Vence el: ${prestamo.Vencimiento} \n----------------------`
                }

                alert(mensajePrestamos)
            }

            break

        case 7: // Ver retrasados

            let hoy = new Date()

            let atrasados = prestamos.filter(atrasado => new Date(atrasado.Vencimiento) < hoy)

            let mensajeAtrasados = `Los siguientes libros deber√≠an haber vuelto ya a la biblioteca:\n______________________________________________________`

            for (let i = 0; i < atrasados.length; i++) {
                mensajeAtrasados += `\nüìå Usuario: ${atrasados[i].Nombre} (DNI ${atrasados[i].Usuario} \nüìï Titulo: "${atrasados[i].T√≠tulo}" de ${atrasados[i].Autor} \nüìÖ Vencimiento: ${atrasados[i].Vencimiento} \n______________________________________________________`
            }

            if (atrasados.length != 0){
                alert(mensajeAtrasados)
            } else {
                alert("üëÆ De momento todo est√° en orden. No hay pr√©stamos atrasados. Pero nos mantendremos vigilantes...")
            }

            break

        default:

            alert('La opci√≥n que seleccionaste no est√° disponible. Volv√© a internarlo.')

            break
    }
}